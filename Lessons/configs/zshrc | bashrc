# ~/.bashrc
#### IF IT SAYS USER that means change it to your username#####

# If not running interactively, don't do anything
[[ $- != *i* ]] && return
#Alias 
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias snvim="sudo -E nvim"

export SUDO_EDITOR=nvim
export EDITOR=nvim

# Bun.js
export BUN_INSTALL="$HOME/.bun"
export PATH=$BUN_INSTALL/bin:$PATH

#Clang
export CLANG_FORMAT=$(which clang-format)

# Conda
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/user/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/user/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/user/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/user/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
# Prevent Anaconda from activating by default
#conda config --set auto_activate_base false
#C++ ABI for Pytorch https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html
export CC=/usr/bin/gcc-11
export CXX=/usr/bin/g++-11

# Cuda/CUDNN ( This CUDA setup is unique to Arch Linux, you may need to do some reconfiguring)
export CUDA_HOME=/opt/cuda
export CUDA_PATH=/opt/cuda
export CUDNN_PATH=/usr
export PATH=$CUDA_HOME/bin:$PATH
export CPATH=$CUDNN_PATH/include:$CPATH
export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64:$CUDNN_PATH/lib:$LD_LIBRARY_PATH
export CUDACXX=$CUDA_HOME/bin/nvcc
#CUDA Unified Memory
export GGML_CUDA_ENABLE_UNIFIED_MEMORY=1
export CUDA_DOCKER_ARCH="compute_89"
# export CUDA_DOCKER_ARCH="compute_70,compute_75,compute_80,compute_86,compute_89"
# Volta (70)
# Turing (75)
# Ampere (80, 86)
# Ada (89)

#Dirmngr
export DIRMNGR_INFO=/run/user/1000/gnupg/S.dirmngr

#distcc
export DISTCC_SSH="/usr/local/bin/distcc-ssh-wrapper"
export CC="distcc gcc"
export CXX="distcc g++"

#Docker
export PATH=/home/testuser/bin:$PATH
export DOCKER_HOST=unix:///run/user/1000/docker.sock

#Docker BuildX
export BUILDX_EXPERIMENTAL=1

#Erlang
export PATH=$PATH:/usr/lib/erlang/bin
export PATH=$PATH:$HOME/.erlang/bin

#GCC
export CC=gcc
export CXX=g++

#Golang
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
export GOROOT=/usr/lib/go
export PATH=$PATH:/usr/lib/go/bin

# GPG-SSH
GPG_TTY=
export GPG_TTY=$(tty)
export GNUPGHOME="$HOME/.gnupg"
# Ensure gpg-agent is running
if ! pgrep -x gpg-agent > /dev/null; then
    gpg-agent --daemon > /dev/null 2>&1
fi
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
if ! gpg-connect-agent "GETINFO ssh_socket_name" /bye > /dev/null 2>&1; then
    echo "Warning: gpg-agent does not support SSH. Make sure it's properly configured."
fi

#Haskell
export PATH="$HOME/.local/bin:$PATH"
export PATH=$HOME/.stack/programs/x86_64-linux/ghc-tinfo6-9.6.5/bin:$PATH
export PATH="$HOME/.ghcup/bin:$PATH"
#HuggingFace
export HF_HUB_ENABLE_HF_TRANSFER=1
#Intel GPU support
export USE_XPU=1
#JAVA
export PATH=$PATH:/usr/lib/jvm/java-22-openjdk/bin


#LDNS
export PATH=$PATH:/bin
export LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH
#Liboqs
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
#Linuxbrew (Not the same as homebrew)
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

#Local
export PATH="/usr/local/bin:$PATH"

#Lua
export PATH=$PATH:/usr/bin/
export PATH="/usr/local/lua5.1/bin:$PATH"
#Luarocks
export PATH=$PATH:/usr/bin/luarocks

#Make
export PATH=$PATH:/usr/local/bin

#Mojo
export LD_LIBRARY_PATH=/home/user/.local/lib/arch-mojo:$LD_LIBRARY_PATH

#Nimble
export PATH=/home/user/.nimble/bin:$PATH
export PATH=$PATH:~/.nimble/bin

#Node
export NVM_DIR="$HOME/.nvm"

#Neovim/Neovide
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/.npm/bin

# OPAM
export PATH="$HOME/.opam/default/bin:$PATH"
eval $(opam env)
test -r /home/phaedrus/.opam/opam-init/init.sh && . /home/user/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true
#OpenSSL
export OPENSSL_MODULES=/usr/lib/ossl-modules
export OPENSSL_CONF=/etc/ssl/openssl.cnf
export OPENSSL_MODULES=/usr/local/lib64/ossl-modules

#Paru (unique to Arch Linux, remove if not using Arch)
export PARU_GPG_FLAGS="--keyserver hkps://keys.openpgp.org --recv-keys"
#Pass
export PATH=$PATH:/bin
#Pkgconfig
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig

#Podman
export PATH=$PATH:/usr/lib/podman

# Powerline
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
. /usr/share/powerline/bindings/bash/powerline.sh
export POWERLINE_CUSTOM_OS_ICON=$'\uF303'
#Python
export PATH=$PATH:/usr/bin/python
export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
#Python 3.14 (refer to Equator for python 3.14 build)
export PATH="/opt/python/p314noGIL/bin:$PATH"
#Pytorch
export LIBTORCH=/opt/libtorch
export LD_LIBRARY_PATH=$LIBTORCH/lib:$LD_LIBRARY_PATH

# Ruby 
export PATH="$PATH:/usr/share/rvm/bin"
[[ -s "/usr/share/rvm/scripts/rvm" ]] && source "/usr/share/rvm/scripts/rvm"
export rvmsudo_secure_path=1
#Rust
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"
if [ -d "$HOME/.cargo/bin" ] ; then
    case ":$PATH:" in
        *":$HOME/.cargo/bin:"*) ;;
        *) export PATH="$HOME/.cargo/bin:$PATH" ;;
    esac
fi
#Swapfile
set noswapfile
#TensorRT (setup unique to arch linux, if you have a windows/linux machine you may have something similar)
export PATH=/opt/cuda/bin:/usr/local/bin:/usr/bin:/opt/TensorRT-10.3.0.26-1/bin:$PATH
export LD_LIBRARY_PATH=/opt/cuda/lib64:/opt/10.3.0.26-1/lib:$LD_LIBRARY_PATH

# UV
export UV_SYSTEM_PYTHON=1
#XDG Runtime
export XDG_RUNTIME_DIR=/run/user/$(id -u)

#XToolaarch64
export PATH="/opt/x-tools8/aarch64-unknown-linux-gnu/bin:$PATH"

# Zig-lang
export PATH=$ZIG_HOME/bin:$PATH
export PATH+=:$ZIG_HOME/bin

#Zoxide
eval "$(zoxide init bash)"
export PATH="$PATH:/home/phaedrus/.local/bin"
