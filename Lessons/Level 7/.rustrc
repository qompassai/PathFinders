#!/usr/bin/env bash

# Set DEBUG_MODE to true for detailed logging, false for quiet
DEBUG_MODE=false

# Check if Rust has already been loaded
if [[ -n "${RUST_LOADED}" ]]; then
    return 0
fi

# Function to check and accumulate status
check_status() {
    if [[ "$2" == "success" ]]; then
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    else
        FAILED_COMPONENTS+=("$1")
    fi
}

# Function to print debug messages only if DEBUG_MODE is true
debug_print() {
    if [[ "${DEBUG_MODE}" == true ]]; then
        printf "%s\n" "$1"
    fi
}

# Initialize variables
SUCCESS_COUNT=0
FAILED_COMPONENTS=()
TOTAL_COMPONENTS=12  # Adjust this number based on the total number of components you're checking

# Environment setup
export RUSTC=clang
export CXX=clang++

# Check Rust tools
for tool in rustc cargo rustup rust-analyzer clippy-driver; do
    if command -v "${tool}" &>/dev/null; then
        check_status "${tool}" "success"
        debug_print "Found ${tool}"
    else
        check_status "${tool}" "failed"
        debug_print "Missing ${tool}"
    fi
done

# Check Rust and Cargo paths
if command -v rustc &>/dev/null && command -v cargo &>/dev/null; then
    check_status "Rust and Cargo paths" "success"
    debug_print "Rust and Cargo paths found"
else
    check_status "Rust and Cargo paths" "failed"
    debug_print "Rust and Cargo paths not found"
fi

# Check RUST_SRC_PATH
RUST_SYSROOT=$(rustc --print sysroot 2>/dev/null)
RUST_SRC_PATH="${RUST_SYSROOT}/lib/rustlib/src/rust/library"
if [[ -d "${RUST_SRC_PATH}" ]]; then
    export RUST_SRC_PATH
    check_status "RUST_SRC_PATH" "success"
    debug_print "RUST_SRC_PATH set to ${RUST_SRC_PATH}"
else
    check_status "RUST_SRC_PATH" "failed"
    debug_print "RUST_SRC_PATH not found"
fi

# Ensure rustup is in PATH
if [[ -d "${HOME}/.rustup/toolchains" ]]; then
    export PATH="${HOME}/.rustup/toolchains:${PATH}"
    check_status "rustup in PATH" "success"
    debug_print "Added rustup to PATH"
else
    check_status "rustup in PATH" "failed"
    debug_print "rustup not in PATH"
fi

# Package Manager (Cargo)
if [[ -f "${HOME}/.cargo/env" ]]; then
    . "${HOME}/.cargo/env"
    check_status "Cargo env" "success"
    debug_print "Sourced Cargo environment"
else
    check_status "Cargo env" "failed"
    debug_print "Cargo environment file not found"
fi

# Ensure Cargo bin is in PATH
if [[ -d "${HOME}/.cargo/bin" ]]; then
    case ":${PATH}:" in
        *":${HOME}/.cargo/bin:"*) ;;
        *) export PATH="${HOME}/.cargo/bin:${PATH}" ;;
    esac
    check_status "Cargo bin in PATH" "success"
    debug_print "Added Cargo bin to PATH"
else
    check_status "Cargo bin in PATH" "failed"
    debug_print "Cargo bin directory not found"
fi

# Add Rust include path to CPATH
RUST_INCLUDE="${RUST_SYSROOT}/lib/rustlib/include"
if [[ -d "${RUST_INCLUDE}" ]]; then
    export CPATH="${RUST_INCLUDE}:${CPATH}"
    check_status "Rust include path in CPATH" "success"
    debug_print "Added Rust include path to CPATH"
else
    check_status "Rust include path in CPATH" "failed"
    debug_print "Rust include path not found"
fi

# Zoxide setup
if command -v zoxide &>/dev/null; then
    if eval "$(zoxide init bash)"; then
        check_status "Zoxide initialization" "success"
        debug_print "Zoxide initialized"
    else
        check_status "Zoxide initialization" "failed"
        debug_print "Zoxide failed to initialize"
    fi
else
    check_status "Zoxide" "failed"
    debug_print "Zoxide not found"
fi

# For faster builds
export RUSTC_WRAPPER=sccache

# Print final status if DEBUG_MODE is enabled
if [[ "${DEBUG_MODE}" == true ]]; then
    if [[ "${SUCCESS_COUNT}" -eq "${TOTAL_COMPONENTS}" ]]; then
        printf "Rust environment successfully loaded.\n"
    else
        printf "Rust environment partially loaded. Failed components: %s\n" "${FAILED_COMPONENTS[*]}"
    fi
fi

# Mark Rust as loaded to avoid redundant loading
export RUST_LOADED=1
